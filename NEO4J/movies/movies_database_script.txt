// 01 - Criando os nos e os relacionamentos
CREATE (matrix1:Movie { title : 'The Matrix', year : '1999-03-31' })
CREATE (matrix2:Movie { title : 'The Matrix Reloaded', year : '2003-05-07' })
CREATE (matrix3:Movie { title : 'The Matrix Revolutions', year : '2003-10-27' })
CREATE (keanu:Actor { name:'Keanu Reeves' })
CREATE (laurence:Actor { name:'Laurence Fishburne' })
CREATE (carrieanne:Actor { name:'Carrie-Anne Moss' })
CREATE (keanu)-[:ACTS_IN { role : 'Neo' }]->(matrix1)
CREATE (keanu)-[:ACTS_IN { role : 'Neo' }]->(matrix2)
CREATE (keanu)-[:ACTS_IN { role : 'Neo' }]->(matrix3)
CREATE (laurence)-[:ACTS_IN { role : 'Morpheus' }]->(matrix1)
CREATE (laurence)-[:ACTS_IN { role : 'Morpheus' }]->(matrix2)
CREATE (laurence)-[:ACTS_IN { role : 'Morpheus' }]->(matrix3)
CREATE (carrieanne)-[:ACTS_IN { role : 'Trinity' }]->(matrix1)
CREATE (carrieanne)-[:ACTS_IN { role : 'Trinity' }]->(matrix2)
CREATE (carrieanne)-[:ACTS_IN { role : 'Trinity' }]->(matrix3)

// 02 - Contando a quantidade de nos
MATCH (n)
RETURN "Hello Graph with " + count(*)+ " Nodes!" AS welcome;

// 03 - Retornando um unico no, procurando pelo nome
MATCH (movie:Movie { title: 'The Matrix' })
RETURN movie;

// 04 - Retornando o titulo e a data do no 'The Matrix'
MATCH (movie:Movie { title: 'The Matrix' })
RETURN movie.title, movie.year;

// 05 - Mostrando todos os nos de atores
MATCH (actor:Actor)
RETURN actor;

// 06 - Retornando os nomes de todos os atores em ordem crescente
MATCH (actor:Actor)
RETURN actor.name
ORDER BY actor.name;

// 07 - Contando todos os atores
MATCH (actor:Actor)
RETURN count(*);

// 08 - Contando os atores cujo nome termina em 's'
MATCH (actor:Actor)
WHERE actor.name =~ ".*s$"
RETURN actor.name;

// --- Explorando dados de datasets desconhecidos, Nao usar em producao!!!
// 09 - Contando a quantidade de nos (total)
MATCH (n)
RETURN count(*);

// 10 - Contando a quantidade de cada um dos tipos de relacionamentos possiveis
MATCH (n)-[r]->()
RETURN type(r), count(*);

// 11 - Listando todos os nos e seus relacionamentos
MATCH (n)-[r]->(m)
RETURN n AS FROM , r AS `->`, m AS to;
